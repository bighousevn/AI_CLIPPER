// ~/lib/axiosClient.ts
import axios from "axios";

const axiosClient = axios.create({
    baseURL: process.env.NEXT_PUBLIC_API_URL || "http://localhost:8080/api/v1/",
    headers: {
        "Content-Type": "application/json",
    },
    withCredentials: true, // g·ª≠i cookie (refresh_token)
});

// üéØ Th√™m accessToken v√†o request
axiosClient.interceptors.request.use(
    (config) => {
        const token =
            typeof window !== "undefined"
                ? localStorage.getItem("accessToken")
                : null;

        // Kh√¥ng g·∫Øn token cho c√°c endpoint auth c√¥ng khai
        const isAuthEndpoint =
            config.url?.includes("/auth/login") ||
            config.url?.includes("/auth/register") ||
            config.url?.includes("/auth/refresh-token");

        if (token && config.headers && !isAuthEndpoint) {
            config.headers.Authorization = `Bearer ${token}`;
        }

        return config;
    },
    (error) => Promise.reject(error)
);

// üéØ Refresh token t·ª± ƒë·ªông khi access token h·∫øt h·∫°n
axiosClient.interceptors.response.use(
    (response) => response,
    async (error) => {
        const originalRequest = error.config;

        // N·∫øu g·∫∑p l·ªói 401 (Unauthorized) v√† ch∆∞a retry
        if (error.response?.status === 401 && !originalRequest._retry) {
            originalRequest._retry = true;

            try {
                // üëâ G·ªçi refresh token API (cookie ƒë∆∞·ª£c g·ª≠i k√®m nh·ªù withCredentials)
                const res = await axios.post(
                    `${process.env.NEXT_PUBLIC_API_URL}/auth/refresh-token`,
                    {},
                    { withCredentials: true } // cookie refresh_token ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông
                );

                const newAccessToken = res.data.access_token;

                // L∆∞u l·∫°i access token m·ªõi
                localStorage.setItem("accessToken", newAccessToken);

                // G·∫Øn l·∫°i token v√†o request g·ªëc v√† th·ª≠ g·ª≠i l·∫°i
                originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;
                return axiosClient(originalRequest);
            } catch (err) {
                console.error("Refresh token failed:", err);
                // N·∫øu refresh token h·∫øt h·∫°n ho·∫∑c l·ªói -> xo√° token + logout
                localStorage.removeItem("accessToken");
                window.location.href = "/login";
            }
        }

        return Promise.reject(error);
    }
);

export default axiosClient;
